import Head from 'next/head'
import Header from '@/components/Header'
import { Button, Stack } from '@mantine/core'
import IntroText from '@/components/IntroText'
import ISport from '@/interfaces/ISport'
import IChallenge from '@/interfaces/IChallenge'
import GamesTabs from '@/components/GamesTabs'
import { v4 as uuidv4 } from 'uuid'
import dbConnect from '@/libs/dbConnect'
import Sport from '@/models/Sport'
import { SportsAPI } from '@/datasources/SportsAPI'

export default function Home({sports, challenges}:{sports: ISport[], challenges: IChallenge[]}) {
  return (
    <>
      <Head>
        <title>Maclo-upside</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Stack
          bg={'#f8f9fa'}
          align={'center'}
          h={'100vh'}
          sx={{ padding: '2%', paddingTop: 80, overflow: 'auto'}}>
          <IntroText></IntroText>
          <GamesTabs sports={sports} challenges={challenges}></GamesTabs>
        </Stack>
      </main>
    </>
  )
}

export async function getServerSideProps() {
  const mockedSports: ISport[] = [
    {
      name: 'Nascar',
      description: 'One of the all time classics. Predict outcomes in numerous categories within this sport and profit.',
      new: false,
      image_url: 'https://imgs.search.brave.com/iXHk-lVhKr01efpTP1Dj-eqWNMxZSyN0eQBJJqvGu8g/rs:fit:844:225:1/g:ce/aHR0cHM6Ly90c2Ux/Lm1tLmJpbmcubmV0/L3RoP2lkPU9JUC52/dXpUTWhyaS1JNVhj/aFpUSzFnbHpBSGFF/SyZwaWQ9QXBp',
      challenges: 9
    },
    {
      name: 'Golf',
      description: 'One of the all time classics. Predict outcomes in numerous categories within this sport and win big.',
      new: false,
      challenges: 16,
      image_url: 'https://imgs.search.brave.com/XL3236i64r8594GIDmIBZBfOyJdlQ1wUF9zZrt7uZxQ/rs:fit:1200:1080:1/g:ce/aHR0cHM6Ly9nZXR3/YWxscGFwZXJzLmNv/bS93YWxscGFwZXIv/ZnVsbC80LzYvZi83/OTIyMjMtY29vbC1n/b2xmLWJhY2tncm91/bmRzLTE5MjB4MTA4/MC1mb3ItYW5kcm9p/ZC10YWJsZXQuanBn'
    },
    {
      name: 'Basketball',
      description: 'One of the all time classics. Predict outcomes in numerous categories within this sport and win big.',
      new: false,
      challenges: 11,
      image_url: 'https://imgs.search.brave.com/u2da_FHDpYE455uTHqjmhDNFbK1GsrJru3npMpK6oXo/rs:fit:711:225:1/g:ce/aHR0cHM6Ly90c2U0/Lm1tLmJpbmcubmV0/L3RoP2lkPU9JUC5C/TFJTVEdudHFNQjVK/c3NCdUZHeHdRSGFF/OCZwaWQ9QXBp'
    },
    {
      name: 'Soccer',
      description: 'One of the all time classics. Predict outcomes in numerous categories within this sport and win big.',
      new: true,
      challenges: 22,
      image_url: 'https://imgs.search.brave.com/lWfE_LieWK_cqYbqB4wB5CWm_ZlemD_iK5H9qTziQZY/rs:fit:799:225:1/g:ce/aHR0cHM6Ly90c2U0/Lm1tLmJpbmcubmV0/L3RoP2lkPU9JUC5L/WVlRc2hfZGdpZVVZ/NThwUmc1aFpnSGFF/WiZwaWQ9QXBp'
    },
    {
      name: 'Football',
      description: 'One of the all time classics. Predict outcomes in numerous categories within this sport and win big.',
      new: true,
      challenges: 12,
      image_url: 'https://imgs.search.brave.com/49ie4PM8gOMPdVPb8yhM1SWfC_30bP-Y7cCsVkNFDjE/rs:fit:841:225:1/g:ce/aHR0cHM6Ly90c2Uz/Lm1tLmJpbmcubmV0/L3RoP2lkPU9JUC5U/NTQ4aGZlaGM1YkxQ/SkxQMFk5NTRnSGFF/TCZwaWQ9QXBp'
    },
    {
      name: 'Baseball',
      description: 'One of the all time classics. Predict outcomes in numerous categories within this sport and win big.',
      new: true,
      challenges: 3,
      image_url: 'https://imgs.search.brave.com/wuYTm0tXVL6mvJh9acqM_TJw_lg60uxf9wMSUBZxDeE/rs:fit:1276:225:1/g:ce/aHR0cHM6Ly90c2Uz/Lm1tLmJpbmcubmV0/L3RoP2lkPU9JUC5n/RS0taXVuUmt6cm1y/SGJRVnVtY3ZRSGFD/dyZwaWQ9QXBp'
    },
  ]
  const mockedChallenges: IChallenge[] = [
    {
      id: uuidv4(),
      sport: 'Nascar',
      title: '1st Position',
      description: 'Pick the pilot who will finish 1st place on this race.',
      participants: 52,
      prizePool: 100,
      endDate: new Date().toUTCString()
    },
    {
      id: uuidv4(),
      sport: 'Nascar',
      title: '3rd Position',
      description: 'Pick the pilot who will finish 3rd place on this race.',
      participants: 44,
      prizePool: 25,
      endDate: new Date().toUTCString()
    },
    {
      id: uuidv4(),
      sport: 'Soccer',
      title: 'Winning Team',
      description: 'Pick the winner of the match.',
      participants: 143,
      prizePool: 50,
      endDate: new Date().toUTCString()
    },
    {
      id: uuidv4(),
      sport: 'Basketball',
      title: 'Player with highest score',
      description: 'Pick the player who will score the most during this match.',
      participants: 21,
      prizePool: 75,
      endDate: new Date().toUTCString()
    },
    {
      id: uuidv4(),
      sport: 'Golf',
      title: 'Tournament Champion',
      description: 'Pick the player who win Tournament X.',
      participants: 12,
      prizePool: 40,
      endDate: new Date().toUTCString()
    },
    {
      id: uuidv4(),
      sport: 'Football',
      title: 'Player with most touchdowns',
      description: 'Pick the player that will score the highest number of touchdowns on Game Y.',
      participants: 12,
      prizePool: 40,
      endDate: new Date().toUTCString()
    },
  ]

  // const sportsResult = await SportsAPI.getSports();
  // const fetchedSports = sportsResult.data;

  return {props: {
    sports: mockedSports,
    challenges: mockedChallenges,
  }}
}
